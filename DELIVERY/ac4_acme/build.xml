<?xml version="1.0" encoding="UTF-8"?>
<project name="TC DELIVERY PACKAGE BUILDER" default="package.delivery" >
	<!-- use the Ant-Contrib library to use extra functions like "if" or "for" -->
	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
		<classpath>
			<pathelement location="ant-contrib-1.0b3.jar" />
		</classpath>
	</taskdef>
	<!-- properties definitions -->
	<property file="${basedir}/build.properties" />
	<property file="${basedir}/version.properties" />
	<import file="buildInfo.xml" />
	<import file="prebuild.xml" />
	<import file="postbuild.xml" />
	<!-- CUSTOM PROPERTIES TO CHANGE FOR EACH PROJECT START 				-->
	<!-- ** Note that properties defined in build.properties are immutable 	-->
	<!-- ** so they can't be overwritten by the values defined here 		-->
	<property name="bmide.dir" value="${basedir}/../../BMIDE/${project.name}" />			<!-- BMIDE root folder (modify only the last folder name in the path -->

	<property name="artifactory.url" value="http://ci.percallgroup.com/artifactory/TCUA" /> <!-- Artifactory url of the teamcenter binaries files -->
	<property name="tc.build.os" value="wntx64" /> 											<!-- Output folder of bmide packages -->
	<property name="tc.main.version" value="tc11" /> 										<!-- Teamcenter main version : tc10 , tc11 , etc. -->
	<property name="tc.patch" value="tc11.2.3.0" /> 										<!-- Teamcenter patch version : tc10.1.7.0 , tc11.2.3.0 ,  etc. -->
	<property name="tc.version" value="tc11000.2.3"/> 										<!-- backup file name to cleanup at the end of the Bmide packaging process -->
	<property name="ivy.repository" value="D:/ivy/tcua/${tc.main.version}/${tc.patch}" />			<!-- repository were clean Teamcenter binary files are stored (mandatory) -->
	<!-- CUSTOM PROPERTIES TO CHANGE FOR EACH PROJECT END -->
	<property name="dev.dir" value="${basedir}/../../DEVT/${project.name}" />			<!-- Path to DEVT folder -->
	<property name="delivery.dir" value="${basedir}/../../../build" />	<!-- Path folder where package is built -->
	<property name="scripts.dir" value="${basedir}/../../SCRIPTS/${project.name}" />	<!-- Path to SCRIPTS folder -->
	<property environment="env" />
	<condition property="build.version" value="${env.BUILD_NUMBER}" else="-UnknownBuildNo">
		<isset property="env.BUILD_NUMBER"/>
	</condition>
	<condition property="build.branch" value="${env.BRANCH_NAME}" else="-UnknownBranch">
		<isset property="env.BRANCH_NAME"/>
	</condition>
	<tstamp>
		<format property="log_timestamp" pattern="yyyy-MM-dd_HH-mm-ss" />
	</tstamp>

	<!-- Main: Construction du package de livraison	-->
	<target name="package.delivery" depends="package.delivery.build.infos" >
		<property name="project.full.name" value="${project.name}-R${release.version}-${build.date}-b${build.version}-${build.branch}" />
		<delete dir="${delivery.dir}" />
		<mkdir dir="${delivery.dir}/${project.full.name}" />
		<!-- Download and unzip teamcenter libs locally -->
		<antcall target="package.delivery.install.libs" />
		<!-- Start compilation of specific developments -->
		<!-- <antcall target="package.delivery.pre.build" /> -->
		<!-- Copy BMIDE folder in delivery folder -->
		<antcall target="package.delivery.bmide.copy" />
		<!-- Build BMIDE Package -->
		<!--<antcall target="package.delivery.bmide.packaging.build.tc10" />-->
		<!-- Copy DEVT folder in delivery folder -->
		<antcall target="package.delivery.dev.copy" />
		<!-- Copy SCRIPTS folder in delivery folder -->
		<antcall target="package.delivery.scripts.copy" />
		<!-- Cleanup actions before building zip file -->
		<antcall target="package.delivery.before_zip"/>
		<!-- Compress build folder into single archive -->
		<antcall target="package.delivery.zip" />
		<!-- Post Actions like automatic deployment -->
		<antcall target="package.delivery.post.build" />
	</target>

	<!-- Download and unzip teamcenter libs locally -->
	<target name="package.delivery.install.libs"  >
		<echo>Test if tcroot folder is present in ${ivy.repository} </echo>
		<available file="${ivy.repository}/tcroot" type="dir" property="ivy.rep.tcroot.dir.exist" />
		<if>
			<istrue value="${ivy.rep.tcroot.dir.exist}"/>
			<then>
				<echo>${ivy.repository}/tcroot already present</echo>
			</then>
			<else >
				<get src="${artifactory.url}/${tc.build.os}/${tc.main.version}/${tc.patch}/${tc.patch}.zip"
					dest="${ivy.repository}/.."
					verbose="false"
					usetimestamp="true"
					skipexisting="true"
				/>
				<unzip src="${ivy.repository}/../${tc.patch}.zip" dest="${ivy.repository}/.."/>
			</else>
		</if>
		
	</target>

	<!-- Copy BMIDE folder in delivery folder -->
	<target name="package.delivery.bmide.copy" >
		<mkdir dir="${delivery.dir}/${project.full.name}/BMIDE/${project.name}" />
		<copy todir="${delivery.dir}/${project.full.name}/BMIDE/${project.name}" >
			<fileset dir="${bmide.dir}" >
				<include name="**/*" />
				<exclude name="**/.svn" />
				<exclude name="**/.settings/" />
				<exclude name="**/output/wnti32/**" />
				<exclude name="**/output/wntx64/**" />
				<exclude name="**/output/LOVs_converted_to_batch/**" />
				<exclude name="**/output/full_update/**" />
				<exclude name="**/output/Samples/**" />
				<exclude name="**/output/tcplmxml/**" />
				<exclude name="**/output/upgrade/**" />
			</fileset>
		</copy>
	</target>

	<!-- Copy DEVT folder in delivery folder -->
	<target name="package.delivery.dev.copy" >
		<echo>Test if ${dev.dir} is present in source code </echo>
		<available file="${dev.dir}" type="dir" property="dev.dir.exist" />
		<if>
			<istrue value="${dev.dir.exist}"/>
			<then>
				<mkdir dir="${delivery.dir}/${project.full.name}/DEVT/${project.name}" />
				<copy todir="${delivery.dir}/${project.full.name}/DEVT/${project.name}" >
					<fileset dir="${dev.dir}" >
						<include name="**/*" />
						<exclude name="**/.gitkeep" />
						<exclude name="**/.metadata/**" />
						<exclude name="**/.dll" />
						<exclude name="**/.exp" />
						<exclude name="**/.pdb" />
						<exclude name="**/.lib" />
						<exclude name="**/.sdf" />
						<exclude name="**/.svn" />
						<exclude name="**/x64/*" />
						<exclude name="**/Debug/*" />
					</fileset>
				</copy>
			</then>
			<else >
				<echo>No ${dev.dir} present in source code</echo>
			</else>
		</if>
	</target>

	<!-- Copy SCRIPTS folder in delivery folder -->
	<target name="package.delivery.scripts.copy" >
		<mkdir dir="${delivery.dir}/${project.full.name}/SCRIPTS/${project.name}" />
		<copy todir="${delivery.dir}/${project.full.name}/SCRIPTS/${project.name}" >
			<fileset dir="${scripts.dir}" >
				<exclude name="**/*_config.pl" />
				<exclude name="**/*_version/version.txt" />
				<exclude name="**/.gitkeep" />
				<exclude name="**/.svn" />
				<exclude name="**/log/*.*" />
				<exclude name="**/output/*.xml" />
				<exclude name="**/set_env.bat" />
				<exclude name="**/syslog/*.*" />
				<include name="**/*" />
			</fileset>
		</copy>
		<copy todir="${delivery.dir}/${project.full.name}/SCRIPTS/set_env" >
			<fileset dir="${scripts.dir}/../set_env" >
				<exclude name="**/*_config.pl" />
				<exclude name="**/*_version/version.txt" />
				<exclude name="**/PERCALL_HANDLERS_LIBRARY_TESTS_config.pl.template" />
				<exclude name="**/.gitkeep" />
				<exclude name="**/.svn" />
				<exclude name="**/log/*.*" />
				<exclude name="**/output/*.xml" />
				<exclude name="**/set_env.bat" />
				<exclude name="**/syslog/*.*" />
				<include name="**/*" />
			</fileset>
		</copy>
	</target>

	<!-- Package BMIDE Project (TC10 and after) -->
	<target name="package.delivery.bmide.packaging.build.tc10" >
		<property name="working.dir" value="${delivery.dir}/${project.full.name}/BMIDE/${project.name}/output/packaging/${tc.build.os}/full_update" />
		<mkdir dir="${working.dir}" />
		<echo>Detect presence of ${ivy.repository}\tcroot\bin\bmide_package_template.bat </echo>
		<available file="${ivy.repository}/tcroot/bin/bmide_package_template.bat" property="bmide_package_template.exist" />
		<if>
			<istrue value="${bmide_package_template.exist}"/>
			<then>
				<echo>Package Bmide Template Start</echo>
				<path id="projectLocation.path">
					<pathelement location="${delivery.dir}/${project.full.name}/BMIDE/${project.name}"/>
				</path>
				<pathconvert targetos="windows" property="projectLocation.path.win" refid="projectLocation.path">
					<map from="/" to="\"/>
				</pathconvert>
				<path id="packageLocation.path">
					<pathelement location="${working.dir}"/>
				</path>
				<pathconvert targetos="windows" property="packageLocation.path.win" refid="packageLocation.path">
					<map from="/" to="\"/>
				</pathconvert>
				<path id="dependencyTemplateFolder.path">
					<pathelement location="${basedir}/templates"/>
				</path>
				<pathconvert targetos="windows" property="dependencyTemplateFolder.path.win" refid="dependencyTemplateFolder.path">
					<map from="/" to="\"/>
				</pathconvert>
				<path id="bmide_package_template.log.path">
					<pathelement location="${delivery.dir}/bmide_package_template_${log_timestamp}.log"/>
				</path>
				<pathconvert targetos="windows" property="bmide_package_template.log.path.win" refid="bmide_package_template.log.path">
					<map from="/" to="\"/>
				</pathconvert>
				<echo>Executing ${ivy.repository}/tcroot/bin/bmide_package_template.bat</echo>
				<echo>with following args :</echo>
				<echo>-projectLocation=${projectLocation.path.win}</echo>
				<echo>-packageLocation=${packageLocation.path.win}</echo>
				<echo>-dependencyTemplateFolder=${dependencyTemplateFolder.path.win}</echo>
				<echo>-log=${bmide_package_template.log.path.win}</echo>
				<exec executable="cmd" failonerror="true">
					<env key="TC_BIN" value="${ivy.repository}/tcroot/bin"/>
					<env key="JRE_HOME" value="${tc.jre.home}"/>
					<arg value="/c"/>
					<arg value="${ivy.repository}/tcroot/bin/bmide_package_template.bat"/>
					<arg value="-projectLocation=${projectLocation.path.win}"/>
					<arg value="-packageLocation=${packageLocation.path.win}"/>
					<arg value="-dependencyTemplateFolder=${dependencyTemplateFolder.path.win}"/>
					<!--<arg value="-codeGenerationFolder="/>-->
					<arg value="-log=${bmide_package_template.log.path.win}"/>
				</exec>
				<!-- Detect Result file -->
				<available file="${working.dir}/${project.light.name}_template.zip" property="isFileAvail" />
				<fail unless="isFileAvail" message="BMIDE_CONSOLIDATOR FAILED !" />
				<delete verbose="true" includeemptydirs="true">
					<fileset dir="${packageLocation.path.win}" >
						<exclude name="*.*"/>
						<include name="**/*"/>
					</fileset>
				</delete>
			</then>
			<else >
				<fail message="bmide_package_template.bat was not found in ivy.repository : ${ivy.repository}\tcroot\bin\"/>
			</else>
		</if>
	</target>

	<!-- Cleanup actions before building zip file -->
	<target name="package.delivery.before_zip">
		<!-- copy build.info in delivery folder -->
		<echo>Copy of build.info file</echo>
		<copy todir="${delivery.dir}/${project.full.name}">
			<fileset dir="${basedir}">
				<include name="build.info" />
				<exclude name="*.git" />
			</fileset>
		</copy>
		<!-- suppress bmide backup archive file -->
		<property name="bmide.backup.archive.file.path" value="${delivery.dir}/${project.full.name}/BMIDE/${project.name}/output/packaging/${tc.build.os}/full_update"/>
		<property name="bmide.backup.archive.file" value="${project.light.name}_project_${tc.version}.zip"/>
		<available file="${bmide.backup.archive.file.path}/${bmide.backup.archive.file}" property="bmide.backup.archive.file.exist" />
		<if>
			<istrue value="${bmide.backup.archive.file.exist}"/>
			<then>
				<echo>suppress ${bmide.backup.archive.file} file</echo>
				<delete verbose="true" file="${bmide.backup.archive.file.path}/${bmide.backup.archive.file}" />
			</then>
		</if>
	</target>

	<!-- Compress build folder into single archive -->
	<target name="package.delivery.zip" >
		<zip destfile="${delivery.dir}/${project.full.name}.zip">
			<fileset dir="${delivery.dir}/${project.full.name}">
				<include name="**" />
			</fileset>
		</zip>
		<delete dir="${delivery.dir}/${project.full.name}" />
	</target>
	
</project>